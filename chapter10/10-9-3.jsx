// 空行を削除する関数/**    @param fileObj 元のテキストのファイルオブジェクト    @param saveObj 処理した結果を保存するファイルオブジェクト    @param maxNullLine 空行が何行以上続いたら削除するか。1なら不要な空行は全部削除*/function cutNullLine(fileObj, saveObj, maxNullLine){    // ファイルが読み込めるかどうか調べる    var flag = fileObj.open("r");   // 読み込みモードで開く    if (!flag){        alert("ファイルが開けません");        return;    }    // 書き込めるかどうか調べる    flag = saveObj.open("w");    if (!flag){        alert("ファイルが書き込めません");    }    // 文字コードはutf-8    saveObj.encoding = "utf-8";    // 空行をカウントするための変数    var count = 0;    // ファイルの最後まで繰り返し処理する    while(!fileObj.eof){        var line = fileObj.readln();    // 1行読み込む        // 空行かどうか調べる        if (line == ""){            count = count + 1;            if (count < maxNullLine){                saveObj.writeln();            }        }else{            saveObj.writeln(line);  // 書き出す            count = 0;  // 空行カウンタをリセットする        }    }    saveObj.close();    $.writeln("空行の削除が終わりました");}(function(){    // フォルダ選択ダイアログを表示する    var folderObj = Folder.selectDialog("処理するフォルダを選択してください");    if (!folderObj){ return; }    // キャンセルされた場合は何も処理しない    var maxNullLine = prompt("削除する最大行数を入れてください", 1);    if (!maxNullLine){ return; }    maxNullLine = parseInt(maxNullLine);    // 強制的に整数値にする    // ここから再帰処理    (function (folderObj){        // テキストファイル一覧を取得する        var flieList = folderObj.getFiles("*.txt");        // ファイル数だけ繰り返す        for(var i=0; i<flieList.length; i++){            // ファイル保存先を同じフォルダにし名前の最後に_cutを付加する            var filePath = flieList[i].path;            var fileName = flieList[i].name;            fileName = fileName.slice(0, -4)+"_cut.txt";    // 拡張子を削除し新たな文字を追加            var saveObj = new File(filePath + "/" +fileName);            $.writeln(saveObj.fsName+"を処理します");            cutNullLine(flieList[i], saveObj, maxNullLine);        }        // サブフォルダの有無を調べて処理する        flieList = folderObj.getFiles();        for(var i=0; i<flieList.length; i++){            if (flieList[i].getFiles){  // フォルダの場合                arguments.callee(flieList[i]);  // 自分自身（関数）を呼び出す            }        }    })(folderObj);    alert("終了しました");})();